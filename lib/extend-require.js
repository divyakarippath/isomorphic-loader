"use strict";

/* eslint-disable max-statements, max-len, complexity, prefer-template, no-magic-numbers */

const Fs = require("fs");
const Module = require("module");
const Path = require("path");
const Config = require("./config");
const removeCwd = require("./remove-cwd");
const Pkg = require("../package.json");
const posixify = require("./posixify");
const logger = require("./logger");
const assert = require("assert");

const LOG_PREFIX = "isomorphic-loader";

let originalLoad;

class ExtendRequire {
  constructor(options) {
    this.assetsCount = 0;
    this.assets = {};
    this.config = {};
    this.options = { ...options };
  }

  /**
   * Determine if isomorphic data is generated by webpack running in dev mode
   *
   * @returns {boolean} true if webpack is running in dev mode
   */
  isWebpackDev() {
    return Boolean(this.config.isWebpackDev);
  }

  /**
   * Stop extend node.js require, restore original require, and clear config and assets data.
   *
   * @returns {*} undefined
   */
  reset() {
    this.deactivate();
    this.config = this.assets = {};

    if (originalLoad) {
      Module._load = originalLoad;
      originalLoad = undefined;
    }
  }

  /**
   * Set the assets mapping to use for modified require behavior
   *
   * @param {*} config - isomorphic config generated from the webpack plugin
   * @returns {*} undefined
   */
  initialize(config) {
    this.config = { ...config };

    if (this.options.processConfig) {
      this.config = this.options.processConfig(this.config);
    }

    this.assets = { marked: {}, ...this.config.assets };
    assert(
      this.config.version === Pkg.version,
      `${LOG_PREFIX}: this module version ${Pkg.version} is different from config version ${this.config.version}`
    );
    this.activate();
    this.interceptLoad();
  }

  /**
   * stop mapping non-standard JS module for node.js require
   *
   * @returns {*} undefined
   */
  deactivate() {
    this.assetsCount = 0;
  }

  /**
   * Look for and load assets from `dist/isomorphic-assets.json` or the array of files passed in
   * @param {*} customFilePath - optional file to look for and load
   * @returns {string} the name of the file that's loaded
   */
  loadAssets(customFilePath) {
    return []
      .concat(customFilePath, this.options.assetsFile, Config.defaultAssetsFile)
      .filter(x => x)
      .find(file => {
        try {
          const assets = JSON.parse(Fs.readFileSync(file, "utf-8"));
          this.initialize(assets);
          return true;
        } catch (err) {
          return false;
        }
      });
  }

  /**
   * start mapping non-standard JS module for node.js require.
   *
   * - assets must have been set with `setAssets`
   * @returns {*} undefined
   */
  activate() {
    this.assetsCount = Object.keys(this.assets.marked).length;
  }

  interceptLoad() {
    if (originalLoad) {
      return;
    }

    originalLoad = Module._load;

    const isAssetNotFound = request => {
      const x = Path.basename(request);
      return Object.keys(this.assets.marked).find(name => {
        return Path.basename(name).indexOf(x) >= 0;
      });
    };

    const checkAsset = (moduleInstance, request, parent) => {
      const config = this.config;
      if (config.output && this.assetsCount > 0) {
        const loaderIndex = request.lastIndexOf("!");

        let xRequest = loaderIndex > 0 ? request.substr(loaderIndex + 1) : request;

        xRequest = xRequest.trim();
        if (parent && parent.filename && xRequest.startsWith(".")) {
          xRequest = Path.join(Path.dirname(parent.filename), xRequest);
        }

        let resolved;
        try {
          resolved = posixify(removeCwd(moduleInstance._resolveFilename(xRequest, parent)));
        } catch (e) {
          if (isAssetNotFound(xRequest)) {
            logger.error(LOG_PREFIX, "check asset " + xRequest + " exception", e);
          }
          return undefined;
        }

        let assetUrl = this.assets.marked[resolved];

        if (assetUrl) {
          assetUrl = config.output.publicPath + assetUrl;

          if (config.isWebpackDev && config.webpackDev.addUrl && config.webpackDev.url) {
            const sep =
              !config.webpackDev.url.endsWith("/") && !assetUrl.startsWith("/") ? "/" : "";
            assetUrl = config.webpackDev.url + sep + assetUrl;
          }

          return assetUrl;
        }
      }

      return undefined;
    };

    Module._load = function(request, parent, isMain) {
      const a = checkAsset(this, request, parent);
      if (a !== undefined) {
        return a;
      }

      return originalLoad.apply(this, [request, parent, isMain]);
    };
  }
}

module.exports = { ExtendRequire };
